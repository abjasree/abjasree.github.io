{"mappings":"ACGA,MAAM,EAAe,SAAS,cAAc,CAAC,gBAG7C,IAAI,EAAc,aAAa,OAAO,CAAC,SAClC,IAED,EADE,OAAO,UAAU,EAAI,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAClE,OAEA,QAEhB,aAAa,OAAO,CAAC,QAAS,IAG5B,AAAgB,SAAhB,GACF,SAAS,eAAe,CAAC,YAAY,CAAC,aAAc,QACpD,EAAa,WAAW,CAAG,OAE3B,SAAS,eAAe,CAAC,eAAe,CAAC,cACzC,EAAa,WAAW,CAAG,gBAG7B,EAAa,gBAAgB,CAAC,QAAS,KACjC,AAAwD,SAAxD,SAAS,eAAe,CAAC,YAAY,CAAC,eACxC,SAAS,eAAe,CAAC,eAAe,CAAC,cACzC,EAAa,WAAW,CAAG,eAC3B,aAAa,OAAO,CAAC,QAAS,WAE9B,SAAS,eAAe,CAAC,YAAY,CAAC,aAAc,QACpD,EAAa,WAAW,CAAG,KAC3B,aAAa,OAAO,CAAC,QAAS,QAElC,GAKA,MAAM,EAAY,SAAS,cAAc,CAAC,eAE1C,OAAO,gBAAgB,CAAC,SAAU,KAChC,EAAU,KAAK,CAAC,OAAO,CAAG,OAAO,OAAO,CAAG,IAAM,QAAU,MAC7D,GAEA,EAAU,gBAAgB,CAAC,QAAS,AAAC,IACnC,EAAE,cAAc,GAChB,OAAO,QAAQ,CAAC,CAAE,IAAK,EAAG,SAAU,QAAS,EAC/C,GAGA,EAAU,KAAK,CAAC,OAAO,CAAG,OAAO,OAAO,CAAG,IAAM,OAAS,OAK1D,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAW,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC,gBAChD,EAAW,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC,iBAChD,EAAc,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC,kBAGzD,SAAS,IACP,IAAI,EAAiB,GACf,EAAU,OAAO,OAAO,CAE9B,EAAS,OAAO,CAAC,AAAC,IAChB,IAAM,EAAa,EAAQ,SAAS,CAPnB,IAQX,EAAgB,EAAQ,YAAY,CACtC,GAAW,GAAc,EAAU,EAAa,GAClD,CAAA,EAAiB,EAAQ,YAAY,CAAC,KADxC,CAGF,GAGI,OAAO,WAAW,CAAG,GAAW,SAAS,IAAI,CAAC,YAAY,CAAG,GAC/D,CAAA,EAAiB,CAAQ,CAAC,EAAS,MAAM,CAAG,EAAE,CAAC,YAAY,CAAC,KAD9D,EAIA,EAAS,OAAO,CAAC,AAAC,IACZ,EAAK,YAAY,CAAC,UAAY,CAAC,CAAC,EAAE,EAAA,CAAgB,CACpD,EAAK,SAAS,CAAC,GAAG,CAAC,UAEnB,EAAK,SAAS,CAAC,MAAM,CAAC,SAE1B,GAEA,EAAY,OAAO,CAAC,AAAC,IACf,EAAK,YAAY,CAAC,UAAY,CAAC,CAAC,EAAE,EAAA,CAAgB,CACpD,EAAK,SAAS,CAAC,GAAG,CAAC,UAEnB,EAAK,SAAS,CAAC,MAAM,CAAC,SAE1B,EACF,CAEA,OAAO,gBAAgB,CAAC,SAAU,GAClC,GACF,GAKA,MAAM,EAAY,SAAS,cAAc,CAAC,aACpC,EAAY,SAAS,cAAc,CAAC,aAEtC,GACF,EAAU,gBAAgB,CAAC,QAAS,KAClC,EAAU,SAAS,CAAC,MAAM,CAAC,QAC3B,IAAM,EAAW,AAA4C,SAA5C,EAAU,YAAY,CAAC,iBACxC,EAAU,YAAY,CAAC,gBAAkB,AAAA,CAAA,CAAC,CAAA,EAAU,QAAQ,GAC9D,GAIF,EAAU,gBAAgB,CAAC,QAAS,AAAC,IACtB,EAAM,MAAM,CAAC,OAAO,CAAC,OAEhC,EAAU,SAAS,CAAC,MAAM,CAAC,QAC3B,EAAU,YAAY,CAAC,gBAAiB,SAE5C","sources":["<anon>","src/script.js"],"sourcesContent":["// ========================\n// Theme Toggle using data attribute with preferred color scheme detection\n// ========================\nconst toggleButton = document.getElementById(\"theme-toggle\");\n// Check if a theme is stored; if not, use the user's preferred color scheme.\nlet storedTheme = localStorage.getItem(\"theme\");\nif (!storedTheme) {\n    if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) storedTheme = \"dark\";\n    else storedTheme = \"light\";\n    localStorage.setItem(\"theme\", storedTheme);\n}\nif (storedTheme === \"dark\") {\n    document.documentElement.setAttribute(\"data-theme\", \"dark\");\n    toggleButton.textContent = \"\\u2600\\uFE0F\";\n} else {\n    document.documentElement.removeAttribute(\"data-theme\");\n    toggleButton.textContent = \"\\uD83C\\uDF19\";\n}\ntoggleButton.addEventListener(\"click\", ()=>{\n    if (document.documentElement.getAttribute(\"data-theme\") === \"dark\") {\n        document.documentElement.removeAttribute(\"data-theme\");\n        toggleButton.textContent = \"\\uD83C\\uDF19\";\n        localStorage.setItem(\"theme\", \"light\");\n    } else {\n        document.documentElement.setAttribute(\"data-theme\", \"dark\");\n        toggleButton.textContent = \"\\u2600\\uFE0F\";\n        localStorage.setItem(\"theme\", \"dark\");\n    }\n});\n// ========================\n// Back-to-Top Button\n// ========================\nconst backToTop = document.getElementById(\"back-to-top\");\nwindow.addEventListener(\"scroll\", ()=>{\n    backToTop.style.display = window.scrollY > 300 ? \"block\" : \"none\";\n});\nbackToTop.addEventListener(\"click\", (e)=>{\n    e.preventDefault();\n    window.scrollTo({\n        top: 0,\n        behavior: \"smooth\"\n    });\n});\n// Ensure correct initial display\nbackToTop.style.display = window.scrollY > 300 ? \"flex\" : \"none\";\n// ========================\n// Fixed Navigation Highlighting (with caching)\n// ========================\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const sections = Array.from(document.querySelectorAll(\"section[id]\"));\n    const navLinks = Array.from(document.querySelectorAll(\".nav-links a\"));\n    const mobileLinks = Array.from(document.querySelectorAll(\".mobile-nav a\"));\n    const headerOffset = 100; // Adjust if needed\n    function updateActiveLink() {\n        let currentSection = \"\";\n        const scrollY = window.scrollY;\n        sections.forEach((section)=>{\n            const sectionTop = section.offsetTop - headerOffset;\n            const sectionHeight = section.offsetHeight;\n            if (scrollY >= sectionTop && scrollY < sectionTop + sectionHeight) currentSection = section.getAttribute(\"id\");\n        });\n        // If at the bottom of the page, set currentSection to the last section\n        if (window.innerHeight + scrollY >= document.body.offsetHeight - 5) currentSection = sections[sections.length - 1].getAttribute(\"id\");\n        navLinks.forEach((link)=>{\n            if (link.getAttribute(\"href\") === `#${currentSection}`) link.classList.add(\"active\");\n            else link.classList.remove(\"active\");\n        });\n        mobileLinks.forEach((link)=>{\n            if (link.getAttribute(\"href\") === `#${currentSection}`) link.classList.add(\"active\");\n            else link.classList.remove(\"active\");\n        });\n    }\n    window.addEventListener(\"scroll\", updateActiveLink);\n    updateActiveLink();\n});\n// ========================\n// Mobile Menu Toggle with aria-expanded and Event Delegation\n// ========================\nconst hamburger = document.getElementById(\"hamburger\");\nconst mobileNav = document.getElementById(\"mobileNav\");\nif (hamburger) hamburger.addEventListener(\"click\", ()=>{\n    mobileNav.classList.toggle(\"open\");\n    const expanded = hamburger.getAttribute(\"aria-expanded\") === \"true\";\n    hamburger.setAttribute(\"aria-expanded\", (!expanded).toString());\n});\n// Using event delegation to close mobile menu when any link is clicked.\nmobileNav.addEventListener(\"click\", (event)=>{\n    const link = event.target.closest(\"a\");\n    if (link) {\n        mobileNav.classList.remove(\"open\");\n        hamburger.setAttribute(\"aria-expanded\", \"false\");\n    }\n});\n\n//# sourceMappingURL=index.ff9c4dac.js.map\n","// ========================\n// Theme Toggle using data attribute with preferred color scheme detection\n// ========================\nconst toggleButton = document.getElementById(\"theme-toggle\");\n\n// Check if a theme is stored; if not, use the user's preferred color scheme.\nlet storedTheme = localStorage.getItem(\"theme\");\nif (!storedTheme) {\n  if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n    storedTheme = \"dark\";\n  } else {\n    storedTheme = \"light\";\n  }\n  localStorage.setItem(\"theme\", storedTheme);\n}\n\nif (storedTheme === \"dark\") {\n  document.documentElement.setAttribute(\"data-theme\", \"dark\");\n  toggleButton.textContent = \"☀️\";\n} else {\n  document.documentElement.removeAttribute(\"data-theme\");\n  toggleButton.textContent = \"🌙\";\n}\n\ntoggleButton.addEventListener(\"click\", () => {\n  if (document.documentElement.getAttribute(\"data-theme\") === \"dark\") {\n    document.documentElement.removeAttribute(\"data-theme\");\n    toggleButton.textContent = \"🌙\";\n    localStorage.setItem(\"theme\", \"light\");\n  } else {\n    document.documentElement.setAttribute(\"data-theme\", \"dark\");\n    toggleButton.textContent = \"☀️\";\n    localStorage.setItem(\"theme\", \"dark\");\n  }\n});\n\n// ========================\n// Back-to-Top Button\n// ========================\nconst backToTop = document.getElementById(\"back-to-top\");\n\nwindow.addEventListener(\"scroll\", () => {\n  backToTop.style.display = window.scrollY > 300 ? \"block\" : \"none\";\n});\n\nbackToTop.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n  window.scrollTo({ top: 0, behavior: \"smooth\" });\n});\n\n// Ensure correct initial display\nbackToTop.style.display = window.scrollY > 300 ? \"flex\" : \"none\";\n\n// ========================\n// Fixed Navigation Highlighting (with caching)\n// ========================\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const sections = Array.from(document.querySelectorAll(\"section[id]\"));\n  const navLinks = Array.from(document.querySelectorAll(\".nav-links a\"));\n  const mobileLinks = Array.from(document.querySelectorAll(\".mobile-nav a\"));\n  const headerOffset = 100; // Adjust if needed\n\n  function updateActiveLink() {\n    let currentSection = \"\";\n    const scrollY = window.scrollY;\n\n    sections.forEach((section) => {\n      const sectionTop = section.offsetTop - headerOffset;\n      const sectionHeight = section.offsetHeight;\n      if (scrollY >= sectionTop && scrollY < sectionTop + sectionHeight) {\n        currentSection = section.getAttribute(\"id\");\n      }\n    });\n\n    // If at the bottom of the page, set currentSection to the last section\n    if (window.innerHeight + scrollY >= document.body.offsetHeight - 5) {\n      currentSection = sections[sections.length - 1].getAttribute(\"id\");\n    }\n\n    navLinks.forEach((link) => {\n      if (link.getAttribute(\"href\") === `#${currentSection}`) {\n        link.classList.add(\"active\");\n      } else {\n        link.classList.remove(\"active\");\n      }\n    });\n\n    mobileLinks.forEach((link) => {\n      if (link.getAttribute(\"href\") === `#${currentSection}`) {\n        link.classList.add(\"active\");\n      } else {\n        link.classList.remove(\"active\");\n      }\n    });\n  }\n\n  window.addEventListener(\"scroll\", updateActiveLink);\n  updateActiveLink();\n});\n\n// ========================\n// Mobile Menu Toggle with aria-expanded and Event Delegation\n// ========================\nconst hamburger = document.getElementById(\"hamburger\");\nconst mobileNav = document.getElementById(\"mobileNav\");\n\nif (hamburger) {\n  hamburger.addEventListener(\"click\", () => {\n    mobileNav.classList.toggle(\"open\");\n    const expanded = hamburger.getAttribute(\"aria-expanded\") === \"true\";\n    hamburger.setAttribute(\"aria-expanded\", (!expanded).toString());\n  });\n}\n\n// Using event delegation to close mobile menu when any link is clicked.\nmobileNav.addEventListener(\"click\", (event) => {\n  const link = event.target.closest(\"a\");\n  if (link) {\n    mobileNav.classList.remove(\"open\");\n    hamburger.setAttribute(\"aria-expanded\", \"false\");\n  }\n});\n"],"names":["toggleButton","document","getElementById","storedTheme","localStorage","getItem","window","matchMedia","matches","setItem","documentElement","setAttribute","textContent","removeAttribute","addEventListener","getAttribute","backToTop","style","display","scrollY","e","preventDefault","scrollTo","top","behavior","sections","Array","from","querySelectorAll","navLinks","mobileLinks","updateActiveLink","currentSection","forEach","section","sectionTop","offsetTop","sectionHeight","offsetHeight","innerHeight","body","length","link","classList","add","remove","hamburger","mobileNav","toggle","expanded","toString","event","target","closest"],"version":3,"file":"index.ff9c4dac.js.map"}